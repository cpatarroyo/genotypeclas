testab
summary(modTrain)
summary(testmod)
testmod
library(caret)
#library(bnclassify)
#library(klaR)
library(poppr)
library(nnet)
setwd("~/Uniandes/Rfiles/genotypeclas")
poptrain <- read.genalex("Training_DB.csv", ploidy = 3)
poptrain
modTrain <- function(population) {
#Prepare the population table for model training
#population <- read.genalex(population)
population <- clonecorrect(population, strata = NA)
population <- missingno(population, cutoff = 0, type = "geno")
poptrain <- population@tab
poplabel <- population@pop
#Remove uninformative "alleles"
uninf <- grep("\\.0$",colnames(poptrain))
poptrain <- poptrain[,-uninf]
#Train the neural network model
set.seed(999)
#searchspace <- expand.grid(size =1:8, decay = seq(0,5, by =0.5))
#trmodel <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1, tuneGrid = searchspace)
#Train the naive bayes clasificator model
trmodel <- train(poptrain,poplabel, method = 'nb',tuneLength = 1)
#Save and return the trained model
saveRDS(trmodel, file = "clasificator/Trained_model.rds")
print(c((mean(trmodel$resample$Accuracy)),mean(trmodel$resample$Kappa)))
return(trmodel)
}
model <- modTrain(poptrain)
warnings()
modTrain <- function(population) {
#Prepare the population table for model training
#population <- read.genalex(population)
population <- clonecorrect(population, strata = NA)
population <- missingno(population, cutoff = 0, type = "geno")
poptrain <- population@tab
poplabel <- population@pop
#Remove uninformative "alleles"
uninf <- grep("\\.0$",colnames(poptrain))
poptrain <- poptrain[,-uninf]
#Train the neural network model
set.seed(999)
#searchspace <- expand.grid(size =1:8, decay = seq(0,5, by =0.5))
#trmodel <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1, tuneGrid = searchspace)
#Train the naive bayes clasificator model
#trmodel <- train(poptrain,poplabel, method = 'nb',tuneLength = 1)
#Train Model by a bayes generalized linear model
trmodel <- train(poptrain,poplabel, method = 'bayesglm')
#Save and return the trained model
saveRDS(trmodel, file = "clasificator/Trained_model.rds")
print(c((mean(trmodel$resample$Accuracy)),mean(trmodel$resample$Kappa)))
return(trmodel)
}
trainIndex <- createDataPartition(population,list=FALSE, p = .8)
population <- read.genalex("Training_DB.csv", ploidy = 3)
trainIndex <- createDataPartition(population,list=FALSE, p = .8)
trainIndex <- createDataPartition(population$tab,list=FALSE, p = .8)
trainIndex <- createDataPartition(population$tab,list=FALSE, p = 0.8)
trainIndex <- createDataPartition(population$tab,list=FALSE, p = 0.8,na.rm=TRUE)
trainlen <- round(length(population)*0.8,digits = 0)
trainlen
length(population)
population
length(population$tab)
population[[1]]
genclone
help(genclone)
summary(population)
str(summary(population))
trainlen <- round(summary(population)$n*0.8,digits = 0)
trainindex <- sample(round(length(population)*0.8,digits = 0),replace = FALSE)
help(sample)
trainindex <- sample(1:summary(population)$n,trainlen,replace = FALSE)
trainindex <- sort(sample(1:summary(population)$n,trainlen,replace = FALSE))
modTrain <- function(population) {
#Prepare the population table for model training
#population <- read.genalex(population)
population <- clonecorrect(population, strata = NA)
population <- missingno(population, cutoff = 0, type = "geno")
poptrain <- population@tab
poplabel <- population@pop
#Remove uninformative "alleles"
uninf <- grep("\\.0$",colnames(poptrain))
poptrain <- poptrain[,-uninf]
#Train the neural network model
set.seed(999)
#searchspace <- expand.grid(size =1:8, decay = seq(0,5, by =0.5))
#trmodel <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1, tuneGrid = searchspace)
#Train the naive bayes clasificator model
#trmodel <- train(poptrain,poplabel, method = 'nb',tuneLength = 1)
#Train Model by a bayes generalized linear model
trmodel <- train(poptrain,poplabel, method = 'bayesglm')
#Save and return the trained model
saveRDS(trmodel, file = "clasificator/Trained_model.rds")
print(c((mean(trmodel$resample$Accuracy)),mean(trmodel$resample$Kappa)))
return(trmodel)
}
newPredict <- function(newdata) {
#Load the population to be classified
newpop <- read.genalex(newdata,ploidy =3)
#Load the trained model
trainedModel <- readRDS("clasificator/Trained_model.rds")
#Load the allele table
newtable <- newpop@tab
#Remove uninformative alleles
uninf <- grep("\\.0$",colnames(newtable))
newtable <- newtable[,-uninf]
#Equate the predictors in the model to the variables in the new dataset
missingAl <- which(!trainedModel$finalModel$xNames %in% colnames(newtable))
tempMat <- matrix(data = 0, nrow = length(newtable[,1]), ncol = length(missingAl), dimnames = list(rownames(newtable), trainedModel$finalModel$xNames[missingAl]))
newtable <- cbind(newtable,tempMat)
#Generate the prediction and arrange in a results table
resTable <- data.frame(Lineage = predict(trainedModel,newtable), Probability = unlist(apply(predict(trainedModel,newtable,type = "prob"),MARGIN = 1,FUN = max)))
#Return the resulting table
return(resTable)
}
training <- popsub(population,sublist = trainindex)
test <- popsub(population,exclude = trainindex)
test
training
test
population[1]
training <- population[trainindex]
test <- population[-trainindex]
modTrain(training)
install.package("arm")
install.packages("arm")
install.packages("arm")
library(arm)
modTrain(training)
newPredict <- function(newdata) {
#Load the population to be classified
#newpop <- read.genalex(newdata,ploidy =3)
newpop <- newdata
#Load the trained model
trainedModel <- readRDS("clasificator/Trained_model.rds")
#Load the allele table
newtable <- newpop@tab
#Remove uninformative alleles
uninf <- grep("\\.0$",colnames(newtable))
newtable <- newtable[,-uninf]
#Equate the predictors in the model to the variables in the new dataset
missingAl <- which(!trainedModel$finalModel$xNames %in% colnames(newtable))
tempMat <- matrix(data = 0, nrow = length(newtable[,1]), ncol = length(missingAl), dimnames = list(rownames(newtable), trainedModel$finalModel$xNames[missingAl]))
newtable <- cbind(newtable,tempMat)
#Generate the prediction and arrange in a results table
resTable <- data.frame(Lineage = predict(trainedModel,newtable), Probability = unlist(apply(predict(trainedModel,newtable,type = "prob"),MARGIN = 1,FUN = max)))
#Return the resulting table
return(resTable)
}
prediction <- newPredict(test)
newPredict <- function(newdata) {
#Load the population to be classified
#newpop <- read.genalex(newdata,ploidy =3)
newpop <- newdata
#Load the trained model
trainedModel <- readRDS("clasificator/Trained_model.rds")
#Load the allele table
newtable <- newpop@tab
#Remove uninformative alleles
uninf <- grep("\\.0$",colnames(newtable))
newtable <- newtable[,-uninf]
#Equate the predictors in the model to the variables in the new dataset
missingAl <- which(!trainedModel$finalModel$xNames %in% colnames(newtable))
tempMat <- matrix(data = 0, nrow = length(newtable[,1]), ncol = length(missingAl), dimnames = list(rownames(newtable), trainedModel$finalModel$xNames[missingAl]))
newtable <- cbind(newtable,tempMat)
#Generate the prediction and arrange in a results table
resTable <- data.frame(Lineage = predict(trainedModel,newtable), Probability = unlist(apply(predict(trainedModel,newtable,type = "prob"),MARGIN = 1,FUN = max)))
#Return the resulting table
return(resTable)
}
newpop <- population[-trainindex]
#Load the trained model
trainedModel <- readRDS("clasificator/Trained_model.rds")
#Load the allele table
newtable <- newpop@tab
newtable
#Remove uninformative alleles
uninf <- grep("\\.0$",colnames(newtable))
newtable <- newtable[,-uninf]
newtable
#Equate the predictors in the model to the variables in the new dataset
missingAl <- which(!trainedModel$finalModel$xNames %in% colnames(newtable))
tempMat <- matrix(data = 0, nrow = length(newtable[,1]), ncol = length(missingAl), dimnames = list(rownames(newtable), trainedModel$finalModel$xNames[missingAl]))
newtable <- cbind(newtable,tempMat)
newtable
#Generate the prediction and arrange in a results table
resTable <- data.frame(Lineage = predict(trainedModel,newtable), Probability = unlist(apply(predict(trainedModel,newtable,type = "prob"),MARGIN = 1,FUN = max)))
Lineage = predict(trainedModel,newtable)
unlist(apply(predict(trainedModel,newtable,type = "prob"),MARGIN = 1,FUN = max)
)
predict(trainedModel,newtable,type = "prob")
dimnames(newtable)
length(dimnames)
length(dimnames[[1]])
length(dimnames(newtab)[[1]])
length(dimnames(newtable)[[1]])
length(dimnames(newtable)[[2]])
predict(trainedModel,newtable)
predict(trainedModel,newtable,type = "prob")
#Generate the prediction and arrange in a results table
resTable <- data.frame(PrLineage = predict(trainedModel,newtable),
#Probability = unlist(apply(predict(trainedModel,newtable,type = "prob"),MARGIN = 1,FUN = max)),
Lineage = newpop@pop)
restable
resTable
#Generate the prediction and arrange in a results table
resTable <- data.frame(rownames(newtable),
PrLineage = predict(trainedModel,newtable),
#Probability = unlist(apply(predict(trainedModel,newtable,type = "prob"),MARGIN = 1,FUN = max)),
Lineage = newpop@pop)
resTable
trainedModel
sum(resTable$PrLineage == resTable$Lineage)/dim(resTable)[1]
sum(resTable$PrLineage == resTable$Lineage)
sum(as.character(resTable$PrLineage) == as.character(resTable$Lineage))/dim(resTable)[1]
#Return the resulting table
return(resTable)
as.character(resTable$PrLineage)
sum(as.character(resTable$PrLineage) == as.character(resTable$Lineage))/dim(resTable)[1]
as.character(resTable$PrLineage) == as.character(resTable$Lineage)
sum(as.character(resTable$PrLineage) == as.character(resTable$Lineage),na.rm = T)/dim(resTable)[1]
sum(as.character(resTable$PrLineage) == as.character(resTable$Lineage),na.rm = T)/(dim(resTable)[1] - 1)
newPredict <- function(newdata) {
#Load the population to be classified
#newpop <- read.genalex(newdata,ploidy =3)
newpop <- newdata
#Load the trained model
trainedModel <- readRDS("clasificator/Trained_model.rds")
#Load the allele table
newtable <- newpop@tab
#Remove uninformative alleles
uninf <- grep("\\.0$",colnames(newtable))
newtable <- newtable[,-uninf]
#Equate the predictors in the model to the variables in the new dataset
missingAl <- which(!trainedModel$finalModel$xNames %in% colnames(newtable))
tempMat <- matrix(data = 0, nrow = length(newtable[,1]), ncol = length(missingAl), dimnames = list(rownames(newtable), trainedModel$finalModel$xNames[missingAl]))
newtable <- cbind(newtable,tempMat)
#Generate the prediction and arrange in a results table
resTable <- data.frame(rownames(newtable),
PrLineage = predict(trainedModel,newtable),
#Probability = unlist(apply(predict(trainedModel,newtable,type = "prob"),MARGIN = 1,FUN = max)),
Lineage = newpop@pop)
#Return the resulting table
return(resTable)
}
library(bnclassify)
install.packages("bnclassify")
library(bnclassify)
setwd("~/Uniandes/Rfiles/genotypeclas")
population <- read.genalex("Training_DB.csv", ploidy = 3)
trainlen <- round(summary(population)$n*0.8,digits = 0)
trainindex <- sort(sample(1:summary(population)$n,trainlen,replace = FALSE))
modTrain <- function(population) {
#Prepare the population table for model training
#population <- read.genalex(population)
population <- clonecorrect(population, strata = NA)
population <- missingno(population, cutoff = 0, type = "geno")
poptrain <- population@tab
poplabel <- population@pop
#Remove uninformative "alleles"
uninf <- grep("\\.0$",colnames(poptrain))
poptrain <- poptrain[,-uninf]
#Train the neural network model
set.seed(999)
#searchspace <- expand.grid(size =1:8, decay = seq(0,5, by =0.5))
#trmodel <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1, tuneGrid = searchspace)
#Train the naive bayes clasificator model
#trmodel <- train(poptrain,poplabel, method = 'nb',tuneLength = 1)
#Train Model by a bayes generalized linear model
trmodel <- train(poptrain,poplabel, method = 'bayesglm')
#Save and return the trained model
saveRDS(trmodel, file = "clasificator/Trained_model.rds")
print(c((mean(trmodel$resample$Accuracy)),mean(trmodel$resample$Kappa)))
return(trmodel)
}
modTrain <- function(population) {
#Prepare the population table for model training
#population <- read.genalex(population)
population <- clonecorrect(population, strata = NA)
population <- missingno(population, cutoff = 0, type = "geno")
poptrain <- population@tab
poplabel <- population@pop
#Remove uninformative "alleles"
uninf <- grep("\\.0$",colnames(poptrain))
poptrain <- poptrain[,-uninf]
#Train the neural network model
set.seed(999)
#searchspace <- expand.grid(size =1:8, decay = seq(0,5, by =0.5))
#trmodel <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1, tuneGrid = searchspace)
#Train the naive bayes clasificator model
#trmodel <- train(poptrain,poplabel, method = 'nb',tuneLength = 1)
#Train Model by a bayes generalized linear model
#trmodel <- train(poptrain,poplabel, method = 'bayesglm')
#Train model by Naive Bayes Classifier with Attribute Weighting
trmodel <- train(poptrain,poplabel, method = 'awnb', smooth = 0.5)
#Save and return the trained model
saveRDS(trmodel, file = "clasificator/Trained_model.rds")
print(c((mean(trmodel$resample$Accuracy)),mean(trmodel$resample$Kappa)))
return(trmodel)
}
newPredict <- function(newdata) {
#Load the population to be classified
#newpop <- read.genalex(newdata,ploidy =3)
newpop <- newdata
#Load the trained model
trainedModel <- readRDS("clasificator/Trained_model.rds")
#Load the allele table
newtable <- newpop@tab
#Remove uninformative alleles
uninf <- grep("\\.0$",colnames(newtable))
newtable <- newtable[,-uninf]
#Equate the predictors in the model to the variables in the new dataset
missingAl <- which(!trainedModel$finalModel$xNames %in% colnames(newtable))
tempMat <- matrix(data = 0, nrow = length(newtable[,1]), ncol = length(missingAl), dimnames = list(rownames(newtable), trainedModel$finalModel$xNames[missingAl]))
newtable <- cbind(newtable,tempMat)
#Generate the prediction and arrange in a results table
resTable <- data.frame(rownames(newtable),
PrLineage = predict(trainedModel,newtable),
#Probability = unlist(apply(predict(trainedModel,newtable,type = "prob"),MARGIN = 1,FUN = max)),
Lineage = newpop@pop)
#Return the resulting table
return(resTable)
}
training <- population[trainindex]
newpop <- population[-trainindex]
test <- population[-trainindex]
rm(newpop)
modTrain(training)
warning
warnings()
#Train model by Naive Bayes Classifier with Attribute Weighting
trmodel <- train(poptrain,poplabel, method = 'awnb')
modTrain <- function(population) {
#Prepare the population table for model training
#population <- read.genalex(population)
population <- clonecorrect(population, strata = NA)
population <- missingno(population, cutoff = 0, type = "geno")
poptrain <- population@tab
poplabel <- population@pop
#Remove uninformative "alleles"
uninf <- grep("\\.0$",colnames(poptrain))
poptrain <- poptrain[,-uninf]
#Train the neural network model
set.seed(999)
#searchspace <- expand.grid(size =1:8, decay = seq(0,5, by =0.5))
#trmodel <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1, tuneGrid = searchspace)
#Train the naive bayes clasificator model
#trmodel <- train(poptrain,poplabel, method = 'nb',tuneLength = 1)
#Train Model by a bayes generalized linear model
#trmodel <- train(poptrain,poplabel, method = 'bayesglm')
#Train model by Naive Bayes Classifier with Attribute Weighting
trmodel <- train(poptrain,poplabel, method = 'awnb')
#Save and return the trained model
saveRDS(trmodel, file = "clasificator/Trained_model.rds")
print(c((mean(trmodel$resample$Accuracy)),mean(trmodel$resample$Kappa)))
return(trmodel)
}
modTrain(training)
warnings()
install.packages("fastAdaboost")
library
library(fastAdaboost)
install.packages("adabag")
install.packages("plyr")
install.packages("plyr")
library(adabag)
library(plyr)
modTrain <- function(population) {
#Prepare the population table for model training
#population <- read.genalex(population)
population <- clonecorrect(population, strata = NA)
population <- missingno(population, cutoff = 0, type = "geno")
poptrain <- population@tab
poplabel <- population@pop
#Remove uninformative "alleles"
uninf <- grep("\\.0$",colnames(poptrain))
poptrain <- poptrain[,-uninf]
#Train the neural network model
set.seed(999)
#searchspace <- expand.grid(size =1:8, decay = seq(0,5, by =0.5))
#trmodel <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1, tuneGrid = searchspace)
#Train the naive bayes clasificator model
#trmodel <- train(poptrain,poplabel, method = 'nb',tuneLength = 1)
#Train Model by a bayes generalized linear model
#trmodel <- train(poptrain,poplabel, method = 'bayesglm')
#Train model by Ada boost
trmodel <- train(poptrain,poplabel, method = 'AdaBag', mfinal = 20, maxdepth = 30)
#Save and return the trained model
saveRDS(trmodel, file = "clasificator/Trained_model.rds")
print(c((mean(trmodel$resample$Accuracy)),mean(trmodel$resample$Kappa)))
return(trmodel)
}
newPredict <- function(newdata) {
#Load the population to be classified
#newpop <- read.genalex(newdata,ploidy =3)
newpop <- newdata
#Load the trained model
trainedModel <- readRDS("clasificator/Trained_model.rds")
#Load the allele table
newtable <- newpop@tab
#Remove uninformative alleles
uninf <- grep("\\.0$",colnames(newtable))
newtable <- newtable[,-uninf]
#Equate the predictors in the model to the variables in the new dataset
missingAl <- which(!trainedModel$finalModel$xNames %in% colnames(newtable))
tempMat <- matrix(data = 0, nrow = length(newtable[,1]), ncol = length(missingAl), dimnames = list(rownames(newtable), trainedModel$finalModel$xNames[missingAl]))
newtable <- cbind(newtable,tempMat)
#Generate the prediction and arrange in a results table
resTable <- data.frame(rownames(newtable),
PrLineage = predict(trainedModel,newtable),
#Probability = unlist(apply(predict(trainedModel,newtable,type = "prob"),MARGIN = 1,FUN = max)),
Lineage = newpop@pop)
#Return the resulting table
return(resTable)
}
modTrain(training)
warnings()
modTrain <- function(population) {
#Prepare the population table for model training
#population <- read.genalex(population)
population <- clonecorrect(population, strata = NA)
population <- missingno(population, cutoff = 0, type = "geno")
poptrain <- population@tab
poplabel <- population@pop
#Remove uninformative "alleles"
uninf <- grep("\\.0$",colnames(poptrain))
poptrain <- poptrain[,-uninf]
#Train the neural network model
set.seed(999)
#searchspace <- expand.grid(size =1:8, decay = seq(0,5, by =0.5))
#trmodel <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1, tuneGrid = searchspace)
#Train the naive bayes clasificator model
#trmodel <- train(poptrain,poplabel, method = 'nb',tuneLength = 1)
#Train Model by a bayes generalized linear model
#trmodel <- train(poptrain,poplabel, method = 'bayesglm')
#Train model by Ada boost
trmodel <- train(poptrain,poplabel, method = 'AdaBag', maxdepth = 30)
#Save and return the trained model
saveRDS(trmodel, file = "clasificator/Trained_model.rds")
print(c((mean(trmodel$resample$Accuracy)),mean(trmodel$resample$Kappa)))
return(trmodel)
}
modTrain(training)
prediction <- newPredict(test)
prediction
newPredict <- function(newdata) {
#Load the population to be classified
#newpop <- read.genalex(newdata,ploidy =3)
newpop <- newdata
#Load the trained model
trainedModel <- readRDS("clasificator/Trained_model.rds")
#Load the allele table
newtable <- newpop@tab
#Remove uninformative alleles
uninf <- grep("\\.0$",colnames(newtable))
newtable <- newtable[,-uninf]
#Equate the predictors in the model to the variables in the new dataset
missingAl <- which(!trainedModel$finalModel$xNames %in% colnames(newtable))
tempMat <- matrix(data = 0, nrow = length(newtable[,1]), ncol = length(missingAl), dimnames = list(rownames(newtable), trainedModel$finalModel$xNames[missingAl]))
newtable <- cbind(newtable,tempMat)
#Generate the prediction and arrange in a results table
resTable <- data.frame(rownames(newtable),
PrLineage = predict(trainedModel,newtable),
Probability = unlist(apply(predict(trainedModel,newtable,type = "prob"),MARGIN = 1,FUN = max)),
Lineage = newpop@pop)
#Return the resulting table
return(resTable)
}
prediction <- newPredict(test)
prediction
sum(as.character(resTable$PrLineage) == as.character(resTable$Lineage),na.rm = T)/(dim(resTable)[1])
sum(as.character(prediction$PrLineage) == as.character(prediction$Lineage),na.rm = T)/(dim(prediction)[1])
is.na(prediction$PrLineage)
sum(as.character(prediction$PrLineage) == as.character(prediction$Lineage),na.rm = T)/(dim(prediction)[1])
modTrain <- function(population) {
#Prepare the population table for model training
#population <- read.genalex(population)
population <- clonecorrect(population, strata = NA)
population <- missingno(population, cutoff = 0, type = "geno")
poptrain <- population@tab
poplabel <- population@pop
#Remove uninformative "alleles"
uninf <- grep("\\.0$",colnames(poptrain))
poptrain <- poptrain[,-uninf]
#Train the neural network model
set.seed(999)
searchspace <- expand.grid(size =1:8, decay = seq(0,5, by =0.5))
trmodel <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1, tuneGrid = searchspace)
#Train the naive bayes clasificator model
#trmodel <- train(poptrain,poplabel, method = 'nb',tuneLength = 1)
#Train Model by a bayes generalized linear model
#trmodel <- train(poptrain,poplabel, method = 'bayesglm')
#Train model by Ada boost
#trmodel <- train(poptrain,poplabel, method = 'AdaBag', maxdepth = 30)
#Save and return the trained model
saveRDS(trmodel, file = "clasificator/Trained_model.rds")
print(c((mean(trmodel$resample$Accuracy)),mean(trmodel$resample$Kappa)))
return(trmodel)
}
modTrain(training)
prediction <- newPredict(test)
prediction
sum(as.character(prediction$PrLineage) == as.character(prediction$Lineage),na.rm = T)/(dim(prediction)[1])
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
