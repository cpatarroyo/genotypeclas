library(caret)
library(poppr)
population <- read.genalex("Base de datos ColPeru.csv",ploidy = 3)
str(population)
population@tab
population@pop
restest <- data.frame(Real = population@pop, Pred = NA)
rownames(restest) <- rownames(population@tab)
head(restest)
floor
help(floor)
training <- sample(floor(0.7*length(population@pop)))
training <- sort(sample(floor(0.7*length(population@pop))))
training <- sort(sample(floor(0.7*length(population@pop)),1:1188))
help(sample)
training <- sort(sample(1:1188,floor(0.7*length(population@pop))))
poptrain <- population@tab[training,]
poplabel <- population@pop[training,]
poplabel <- population@pop[training]
poplabel
library(caret)
library(poppr)
poptest <- population@tab[-training,]
help("train")
set.seed(999)
model <- train(poptrain, poplabel, method = 'awnb')
library(bnclassify)
model <- train(poptrain, poplabel, method = 'awnb')
poplabel <- as.character(population@pop[training])
set.seed(999)
model <- train(poptrain, poplabel, method = 'awnb')
warnings()
model <- train(poptrain, poplabel, method = 'nb')
warnings()
model <- train(poptrain, poplabel, method = 'niave_bayes')
class(poptrain)
class(poptrain[1,1])
model <- train(poptrain, poplabel, method = 'nbDiscrete')
model <- train(poptrain, poplabel, method = 'nb')
model <- train(poptrain, poplabel, method = 'nb',tuneLength = 10)
warnings()
head(poptrain)
is.na(poptrain)
sum(is.na(poptrain))
library(caret)
library(bnclassify)
library(klaR)
library(poppr)
population <- read.genalex("Base de datos ColPeru.csv",ploidy = 3)
bruvo.msn(population, vertex.label = NA)
population <- clonecorrect(population, strata = NA)
population <- missingno(population, cutoff = 0, type = "geno")
str(population)
population@tab
population@pop
rownames(restest) <- rownames(population@tab)
restest <- data.frame(Real = population@pop, Pred = NA)
rownames(restest) <- rownames(population@tab)
training <- sort(sample(1:362,floor(0.7*length(population@pop))))
poptrain <- population@tab[training,]
poplabel <- as.character(population@pop[training])
poptest <- population@tab[-training,]
restest <- restest[-training,]
set.seed(999)
model <- train(poptrain, poplabel, method = 'nb',tuneLength = 10)
warnings()
data("iris3")
head(iris3)
data("iris")
head(iris)
x = iris[,-5]
y = iris$Species
modtest = train(x,y,'nb',tuneLength = 10)
modtest
str(modtest)
modtest$finalModel
predict(modtest$finalModel,x)
set.seed(999)
model <- train(poptrain, poplabel, method = 'awnb',tuneLength = 10)
warnings()
poplabel <- population@pop[training]
set.seed(999)
model <- train(poptrain, poplabel, method = 'awnb',tuneLength = 10)
population
poplabel
levels(poplabel)
levels(poplabel)<- c("EC1","PE3","PE7.1")
poplabel <- as.character(poplabel)
poplabel <- as.factor(poplabel)
model <- train(poptrain, poplabel, method = 'awnb',tuneLength = 10)
warnings()
modtest = train(x,y,'awnb',tuneLength = 10)
warnings()
poptest <- as.factor(population@tab[-training,])
set.seed(999)
model <- train(poptrain, poplabel, method = 'awnb',tuneLength = 10)
warnings()
rm(poptest)
poptest <- population@tab[-training,]
head(poptest)
help("train"})
help("train")
#Neural network
model <- train(poptrain,poplabel, method = 'nerualnet',tuneLength = 10)
#Neural network
model <- train(poptrain,poplabel, method = 'neuralnet',tuneLength = 10)
#Neural network
model <- train(poptrain,poplabel, method = 'nnet',tuneLength = 10)
#Neural network
model <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1)
model
predict(model$finalModel,poptest)
predict(model,newdata = poptest)
restest$Pred <- predict(model,newdata = poptest)
restest
confusionMatrix.train(model)
trellis.par.set(caretTheme())
plot(model)
expand.grid
searchspace <- expand.grid(size =5:15)
model <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1, tuneGrid = searchspace)
searchspace <- expand.grid(size =5:15, decay = 0)
model <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1, tuneGrid = searchspace)
warnings()
model
plot(model)
confusionMatrix.train(model)
searchspace <- expand.grid(size =1:8, decay = 0)
model <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1, tuneGrid = searchspace)
model
plot(model)
confusionMatrix.train(model)
searchspace <- expand.grid(size =1:8, decay = seq(0,5, by =0.5))
restest$Pred <- predict(model,newdata = poptest)
restest
sum(restest$Real == restest$Pred)
sum(eq(restest$Real,restest$Pred))
class(restest$Real)
class(restest$Pred)
restest$Real <- as.character(restest$Real)
restest$Pred <- as.character(restest$Pred)
sum(restest$Real == restest$Pred)
(sum(restest$Real == restest$Pred)/length(restest$Real))*100
predict(model,newdata = poptest, type = "prob")
restest <- cbind(restest,predict(model,newdata = poptest, type = "prob"))
restest
model <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1, tuneGrid = searchspace)
plot(modelo)
plot(model)
model
saveRDS
confusionMatrix.train(model)
getwd()
str(population)
add
pop1<- population[1:100]
pop2<- population[101:150]
pop1
pop2
pop1+pop2
pop4 <- c(pop1,pop2)
pop3
pop4
rbind(pop1,pop2)
append(pop1,pop2)
pop4<- new(genclone)
pop4<- new(genclone())
class(pop1)
help(new)
pop4<- new("genclone")
pop1
pop4
pop4[1:100]<-pop1
pop4[1:100]<-pop1[]
pop4<-pop1[1]
pop4
pop4<-pop1[1:100]
pop4[101]<-pop2[1]
pop4
genind
genind(pop1)
help("genind")
help("genclone")
rbind(pop1,pop2)
genclone2genind(pop1)
pop1gind<- genclone2genind(pop1)
pop2gind<- genclone2genind(pop2)
rbind(pop1,pop2)
append(pop1,pop2)
pop
pop(pop1)
pop1$tab
rm(pop4)
rm(pop1gind,pop2gind)
pop3<- rbind(pop1$tab,pop2$tab)
pop3
pop3gid <- as.genpop(pop3)
pop3gid
pop3gid <- as.genclone(pop3)
modtrain <- function(population) {
#Prepare the population table for model training
#population <- read.genalex(population)
population <- clonecorrect(population, strata = NA)
population <- missingno(population, cutoff = 0, type = "geno")
#Train the model
set.seed(999)
searchspace <- expand.grid(size =1:8, decay = seq(0,5, by =0.5))
trmodel <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1, tuneGrid = searchspace)
#Save and return the trained model
saveRDS(trmodel, file = "Trained_model.rds")
return(trmodel)
}
population <- read.genalex("Base de datos ColPeru.csv",ploidy = 3)
testmod <- modtrain(population = population)
class(poptest)
rm(iris, modtest,pop1,pop2,pop3,pop3gid,poptrain,population,searchspace,x,iris3,poplabel,training,y)
confusionMatrix.train(model)
confusionMatrix.train(testmod)
testmod
model$finalModel
str(testmod)
str(model$finalModel)
model$finalModel$convergence
model$finalModel$obsLevels
model$resample
mean(model$resample$Accuracy)
testmod
mean(testmod$resample$Accuracy)
mean(testmod$resample$Kappa)
population <- read.genalex("Base de datos ColPeru.csv",ploidy = 3)
modtrain <- function(population) {
#Prepare the population table for model training
#population <- read.genalex(population)
population <- clonecorrect(population, strata = NA)
population <- missingno(population, cutoff = 0, type = "geno")
poptrain <- population@tab
poplabel <- population@pop
#Train the model
set.seed(999)
searchspace <- expand.grid(size =1:8, decay = seq(0,5, by =0.5))
trmodel <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1, tuneGrid = searchspace)
#Save and return the trained model
saveRDS(trmodel, file = "Trained_model.rds")
printc((mean(testmod$resample$Accuracy)),mean(testmod$resample$Kappa))
return(trmodel)
}
rm(testmod)
rm(model)
testmod<-modtrain(population = population)
testmod
testmod<-modtrain(population = population)
modtrain <- function(population) {
#Prepare the population table for model training
#population <- read.genalex(population)
population <- clonecorrect(population, strata = NA)
population <- missingno(population, cutoff = 0, type = "geno")
poptrain <- population@tab
poplabel <- population@pop
#Train the model
set.seed(999)
searchspace <- expand.grid(size =1:8, decay = seq(0,5, by =0.5))
trmodel <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1, tuneGrid = searchspace)
#Save and return the trained model
saveRDS(trmodel, file = "Trained_model.rds")
print((mean(testmod$resample$Accuracy)),mean(testmod$resample$Kappa))
return(trmodel)
}
testmod<-modtrain(population = population)
testmod <- readRDS("Trained_model.rds")
testmod
plot(testmod)
print((mean(trmodel$resample$Accuracy)),mean(trmodel$resample$Kappa))
print((mean(testmod$resample$Accuracy)),mean(testmod$resample$Kappa))
mean(testmod$resample$Accuracy)
mean(testmod$resample$Kappa)
print((mean(testmod$resample$Accuracy)),mean(testmod$resample$Kappa))
print((mean(testmod$resample$Accuracy)))
print(c((mean(trmodel$resample$Accuracy)),mean(trmodel$resample$Kappa)))
print(c((mean(testmod$resample$Accuracy)),mean(testmod$resample$Kappa)))
modtrain <- function(population) {
#Prepare the population table for model training
#population <- read.genalex(population)
population <- clonecorrect(population, strata = NA)
population <- missingno(population, cutoff = 0, type = "geno")
poptrain <- population@tab
poplabel <- population@pop
#Train the model
set.seed(999)
searchspace <- expand.grid(size =1:8, decay = seq(0,5, by =0.5))
trmodel <- train(poptrain,poplabel, method = 'nnet',tuneLength = 1, tuneGrid = searchspace)
#Save and return the trained model
saveRDS(trmodel, file = "Trained_model.rds")
print(c((mean(trmodel$resample$Accuracy)),mean(trmodel$resample$Kappa)))
return(trmodel)
}
restest
restest1 <- restest[,1]
restest1
restest1 <- restest[,1:""]
restest1 <- restest[,1:2]
restest
restest1
restest1$Pred <- predict(testmod,poptest)
restest1
restest1$Real
class(restest1$Real)
class(restest1$Pred)
restest1$Pred <- as.character(restest1$Pred)
(sum(restest1$Real == restest1$Pred))/length(restest1$Real)
(sum(restest1$Real == restest1$Pred))
confusionMatrix.train(testmod)
testmod
str(testmod)
testmod$ptype
length(testmod$ptype)
testmod$ptype$chr
testmod$ptype[[2]]
testmod$ptype[[1]]
testmod$finalModel$xNames
round
round(96.351455124155222, digits = 2)
shiny::runApp('clasificator')
help(sidebarpanel)
??sidebarPanel
runApp('clasificator')
runApp('clasificator')
